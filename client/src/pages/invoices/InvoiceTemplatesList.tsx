import React, { useState, useEffect } from 'react';
import { format } from 'date-fns';
import InvoicePreview from '../../components/InvoicePreview';

interface InvoiceTemplate {
  id: string;
  fileName: string;
  filePath: string;
  componentName: string;
  templateName: string;
  fileSize: number;
  lastModified: string;
  templateType: string;
  modelUsed: string;
  generatedBy: string;
}

const InvoiceTemplatesList: React.FC = () => {
  const [templates, setTemplates] = useState<InvoiceTemplate[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [selectedTemplate, setSelectedTemplate] = useState<InvoiceTemplate | null>(null);
  const [showPreview, setShowPreview] = useState(false);

  // Fetch real templates from API
  useEffect(() => {
    const fetchTemplates = async () => {
      try {
        setLoading(true);
        setError(null);
        
        // Fetch templates from the backend API
        const response = await fetch('http://localhost:8000/api/invoice-templates/');
        
        if (!response.ok) {
          throw new Error(`HTTP error! status: ${response.status}`);
        }
        
        const data = await response.json();
        setTemplates(data.templates || []);
        
      } catch (err) {
        console.error('Error fetching templates:', err);
        setError(err instanceof Error ? err.message : 'Failed to fetch invoice templates');
      } finally {
        setLoading(false);
      }
    };

    fetchTemplates();
  }, []);


  const handlePreview = (template: InvoiceTemplate) => {
    setSelectedTemplate(template);
    setShowPreview(true);
  };

  const handleDownload = async (template: InvoiceTemplate) => {
    try {
      // Fetch the actual content from the backend
      const response = await fetch(`http://localhost:8000/api/invoice-templates/${template.id}/content`);
      
      if (!response.ok) {
        throw new Error('Failed to fetch template content');
      }
      
      const data = await response.json();
      
      // Create download
      const element = document.createElement('a');
      const file = new Blob([data.content], { type: 'text/typescript' });
      element.href = URL.createObjectURL(file);
      element.download = template.fileName;
      document.body.appendChild(element);
      element.click();
      document.body.removeChild(element);
    } catch (error) {
      console.error('Download error:', error);
      // Fallback to mock content
      const element = document.createElement('a');
      const file = new Blob([`// ${template.componentName} Component\n// Generated by ${template.generatedBy}\n// Model: ${template.modelUsed}\n// Type: ${template.templateType}\n\nexport default function ${template.componentName}() {\n  return (\n    <div className="invoice-template">\n      <h1>Invoice Template</h1>\n      {/* Component code would be here */}\n    </div>\n  );\n}`], { type: 'text/typescript' });
      element.href = URL.createObjectURL(file);
      element.download = template.fileName;
      document.body.appendChild(element);
      element.click();
      document.body.removeChild(element);
    }
  };

  if (loading) {
    return (
      <div className="flex justify-center items-center h-64">
        <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600"></div>
      </div>
    );
  }

  if (error) {
    return (
      <div className="bg-red-50 border border-red-200 rounded-md p-4">
        <div className="flex">
          <div className="ml-3">
            <h3 className="text-sm font-medium text-red-800">Error</h3>
            <div className="mt-2 text-sm text-red-700">{error}</div>
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="container mx-auto p-6">
      <div className="mb-6">
        <h1 className="text-2xl font-bold text-gray-900">Generated Invoice Templates</h1>
        <p className="mt-2 text-sm text-gray-600">
          AI-generated React components for your invoice templates
        </p>
      </div>

      <div className="bg-white shadow overflow-hidden sm:rounded-md">
        <ul className="divide-y divide-gray-200">
          {templates.map((template) => (
            <li key={template.id}>
              <div className="px-4 py-4 sm:px-6 hover:bg-gray-50">
                <div className="flex items-start space-x-4">
                  {/* Preview thumbnail */}
                  <div className="flex-shrink-0 w-32 h-20">
                    <InvoicePreview
                      templateId={template.id}
                      templateName={template.templateName}
                      scale={0.15}
                    />
                  </div>
                  
                  <div className="flex-1 min-w-0">
                    <div className="flex items-center justify-between">
                      <div>
                        <p className="text-sm font-medium text-indigo-600 truncate">
                          {template.templateName}
                        </p>
                        <p className="text-sm text-gray-500">{template.templateType}</p>
                      </div>
                      <div className="flex flex-shrink-0 space-x-2">
                        <span className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-green-100 text-green-800">
                          Active
                        </span>
                        <span className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-blue-100 text-blue-800">
                          {Math.round(template.fileSize / 1024)}KB
                        </span>
                      </div>
                    </div>
                    
                    <div className="mt-2">
                      <div className="sm:flex sm:justify-between">
                        <div className="sm:flex">
                          <p className="flex items-center text-sm text-gray-500">
                            <span className="font-medium">File:</span>
                            <span className="ml-1 font-mono text-xs">{template.fileName}</span>
                          </p>
                          <p className="mt-2 flex items-center text-sm text-gray-500 sm:mt-0 sm:ml-6">
                            <span className="font-medium">Size:</span>
                            <span className="ml-1">{Math.round(template.fileSize / 1024)}KB</span>
                          </p>
                        </div>
                        <div className="mt-2 flex items-center text-sm text-gray-500 sm:mt-0">
                          <span className="font-medium">Component:</span>
                          <span className="ml-1 font-mono text-xs">{template.componentName}</span>
                        </div>
                      </div>
                      
                      <div className="mt-2 sm:flex sm:justify-between">
                        <div className="sm:flex">
                          <p className="flex items-center text-sm text-gray-500">
                            <span className="font-medium">Generated:</span>
                            <span className="ml-1">{format(new Date(template.lastModified), 'MMM dd, yyyy HH:mm')}</span>
                          </p>
                          <p className="mt-2 flex items-center text-sm text-gray-500 sm:mt-0 sm:ml-6">
                            <span className="font-medium">Model:</span>
                            <span className="ml-1">{template.modelUsed}</span>
                          </p>
                        </div>
                        <div className="mt-2 flex items-center text-sm text-gray-500 sm:mt-0">
                          <span className="font-medium">Agent:</span>
                          <span className="ml-1">{template.generatedBy}</span>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
                
                <div className="mt-4 flex space-x-3">
                  <button
                    onClick={() => handlePreview(template)}
                    className="inline-flex items-center px-3 py-2 border border-gray-300 shadow-sm text-sm leading-4 font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500"
                  >
                    üëÅÔ∏è Preview
                  </button>
                  <button
                    onClick={() => handleDownload(template)}
                    className="inline-flex items-center px-3 py-2 border border-gray-300 shadow-sm text-sm leading-4 font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500"
                  >
                    üì• Download
                  </button>
                  <button
                    className="inline-flex items-center px-3 py-2 border border-transparent text-sm leading-4 font-medium rounded-md text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500"
                  >
                    üöÄ Use Template
                  </button>
                </div>
              </div>
            </li>
          ))}
        </ul>
      </div>

      {templates.length === 0 && (
        <div className="text-center py-12">
          <div className="text-gray-400 text-6xl mb-4">üìÑ</div>
          <h3 className="mt-2 text-sm font-medium text-gray-900">No templates generated</h3>
          <p className="mt-1 text-sm text-gray-500">
            Generate invoice templates using the contract processing workflow.
          </p>
        </div>
      )}

      {/* Preview Modal */}
      {showPreview && selectedTemplate && (
        <div className="fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full z-50">
          <div className="relative top-20 mx-auto p-5 border w-11/12 max-w-4xl shadow-lg rounded-md bg-white">
            <div className="mt-3">
              <div className="flex justify-between items-center mb-4">
                <h3 className="text-lg font-medium text-gray-900">
                  Template Preview: {selectedTemplate.templateName}
                </h3>
                <button
                  onClick={() => setShowPreview(false)}
                  className="text-gray-400 hover:text-gray-600"
                >
                  ‚úï
                </button>
              </div>
              
              {/* Live Invoice Preview */}
              <div className="relative bg-white border rounded-lg overflow-hidden shadow-inner" style={{ minHeight: '400px' }}>
                <InvoicePreview
                  templateId={selectedTemplate.id}
                  templateName={selectedTemplate.templateName}
                  scale={0.6}
                />
              </div>
              
              {/* Template Metadata */}
              <div className="mt-4 p-3 bg-gray-50 rounded-lg">
                <h4 className="text-sm font-medium text-gray-900 mb-2">Template Information</h4>
                <div className="grid grid-cols-2 gap-3 text-xs">
                  <div>
                    <span className="font-medium text-gray-600">Component:</span>
                    <span className="ml-1 font-mono">{selectedTemplate.componentName}</span>
                  </div>
                  <div>
                    <span className="font-medium text-gray-600">File Size:</span>
                    <span className="ml-1">{Math.round(selectedTemplate.fileSize / 1024)}KB</span>
                  </div>
                  <div>
                    <span className="font-medium text-gray-600">Generated By:</span>
                    <span className="ml-1">{selectedTemplate.generatedBy}</span>
                  </div>
                  <div>
                    <span className="font-medium text-gray-600">Model:</span>
                    <span className="ml-1">{selectedTemplate.modelUsed}</span>
                  </div>
                  <div className="col-span-2">
                    <span className="font-medium text-gray-600">Last Modified:</span>
                    <span className="ml-1">{format(new Date(selectedTemplate.lastModified), 'MMM dd, yyyy HH:mm')}</span>
                  </div>
                </div>
              </div>
              
              <div className="flex justify-end mt-4 space-x-3">
                <button
                  onClick={() => setShowPreview(false)}
                  className="px-4 py-2 bg-gray-300 text-gray-700 rounded hover:bg-gray-400"
                >
                  Close
                </button>
                <button
                  onClick={() => handleDownload(selectedTemplate)}
                  className="px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700"
                >
                  Download Component
                </button>
              </div>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default InvoiceTemplatesList;